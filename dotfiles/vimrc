" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  if &compatible
   set nocompatible               " Be iMproved
  endif
endif

" download vim-plug if necessary
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

call plug#begin()

Plug 'altercation/vim-colors-solarized'
Plug 'bling/vim-airline'
Plug 'godlygeek/tabular'
Plug 'guns/vim-clojure-highlight'
Plug 'kien/ctrlp.vim'
Plug 'kien/rainbow_parentheses.vim'
Plug 'majutsushi/tagbar'
Plug 'mhinz/vim-signify'
Plug 'matze/vim-move'
Plug 'othree/html5.vim'
Plug 'paredit.vim'
Plug 'rodjek/vim-puppet'
Plug 'scrooloose/syntastic'
Plug 'Shougo/unite.vim' | Plug 'Quramy/vision'
Plug 'Shougo/vimproc.vim', { 'do' : 'make' }
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-leiningen'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-tbone'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'

call plug#end()

" activate mouse in all modes
set mouse=a

" show some invisible characters
set list

" enable line numbers
set number

" make tabs narrower
set tabstop=4
set shiftwidth=4

" disable spacebar right-motion in normal mode
nnoremap <Space> <Nop>
" use it for a leader key instead
let mapleader=" "

" map semicolon to colon
" That way you dont need to hold Shift to enter cmdline mode
map ; :

" map `Y` to yank to the end of the line
" You can still yank the entire line with `yy`
nmap Y y$

" recognize .md files as markdown
au BufRead,BufNewFile *.md set filetype=markdown

" enable rubocop
let g:syntastic_ruby_checkers = ['mri', 'rubocop']

" if our terminal supports escape sequences
if &term == "screen-256color"
  " set the insert mode cursor to a blinking vertical bar
  let &t_SI = "\<Esc>[5 q"
  " in other modes, set the cursor to a blinking block
  let &t_EI = "\<Esc>[1 q"

  " 1 -> blinking block
  " 2 -> solid block
  " 3 -> blinking underscore
  " 4 -> solid underscore
  " 5 -> blinking vertical bar
  " 6 -> solid vertical bar
endif

" Colors
set background=dark
let g:solarized_termcolors=256
let g:solarized_termtrans=1
silent! colorscheme solarized

" Rebalance splits when the window resizes
au VimResized * :wincmd =

" Enable cursorline on the window with focus
augroup cline
  au!
  au WinLeave,InsertEnter * set nocursorline
  au WinEnter,InsertLeave * set cursorline
augroup END

" fugitive shortcuts
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gl :Glog<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gg :Ggrep
nnoremap <leader>gmv :Gmove
nnoremap <leader>grm :Gremove
